# Generated from antlr/Expr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,7,63,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,1,0,4,0,17,8,0,11,0,12,0,18,1,1,4,1,22,8,1,11,1,12,1,23,1,
        1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,40,8,4,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,50,8,5,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,3,6,62,8,6,0,0,7,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        1,0,4,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,42,42,
        47,47,4,0,37,37,43,43,60,60,62,62,73,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,1,16,1,
        0,0,0,3,21,1,0,0,0,5,27,1,0,0,0,7,29,1,0,0,0,9,39,1,0,0,0,11,49,
        1,0,0,0,13,61,1,0,0,0,15,17,7,0,0,0,16,15,1,0,0,0,17,18,1,0,0,0,
        18,16,1,0,0,0,18,19,1,0,0,0,19,2,1,0,0,0,20,22,7,1,0,0,21,20,1,0,
        0,0,22,23,1,0,0,0,23,21,1,0,0,0,23,24,1,0,0,0,24,25,1,0,0,0,25,26,
        6,1,0,0,26,4,1,0,0,0,27,28,5,33,0,0,28,6,1,0,0,0,29,30,5,45,0,0,
        30,8,1,0,0,0,31,40,7,2,0,0,32,33,5,47,0,0,33,40,5,47,0,0,34,40,7,
        3,0,0,35,36,5,62,0,0,36,40,5,61,0,0,37,38,5,60,0,0,38,40,5,61,0,
        0,39,31,1,0,0,0,39,32,1,0,0,0,39,34,1,0,0,0,39,35,1,0,0,0,39,37,
        1,0,0,0,40,10,1,0,0,0,41,42,5,38,0,0,42,50,5,38,0,0,43,44,5,124,
        0,0,44,50,5,124,0,0,45,46,5,61,0,0,46,50,5,61,0,0,47,48,5,33,0,0,
        48,50,5,61,0,0,49,41,1,0,0,0,49,43,1,0,0,0,49,45,1,0,0,0,49,47,1,
        0,0,0,50,12,1,0,0,0,51,52,5,61,0,0,52,53,5,61,0,0,53,62,5,62,0,0,
        54,55,5,60,0,0,55,56,5,61,0,0,56,62,5,61,0,0,57,58,5,60,0,0,58,59,
        5,61,0,0,59,60,5,61,0,0,60,62,5,62,0,0,61,51,1,0,0,0,61,54,1,0,0,
        0,61,57,1,0,0,0,62,14,1,0,0,0,6,0,18,23,39,49,61,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    ID = 1
    WS = 2
    NOT = 3
    MINUS = 4
    STRICTLY_MATH = 5
    BINARYOP = 6
    IMPLIESOP = 7

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'!'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "WS", "NOT", "MINUS", "STRICTLY_MATH", "BINARYOP", "IMPLIESOP" ]

    ruleNames = [ "ID", "WS", "NOT", "MINUS", "STRICTLY_MATH", "BINARYOP", 
                  "IMPLIESOP" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


