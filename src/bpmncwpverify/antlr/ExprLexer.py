# Generated from antlr/Expr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,12,90,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,1,1,
        1,1,2,4,2,31,8,2,11,2,12,2,32,1,3,4,3,36,8,3,11,3,12,3,37,1,3,1,
        3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,3,6,50,8,6,1,7,1,7,1,7,1,7,1,7,
        3,7,57,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,67,8,8,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,79,8,9,1,10,4,10,82,8,10,11,10,
        12,10,83,1,11,4,11,87,8,11,11,11,12,11,88,0,0,12,1,1,3,2,5,3,7,4,
        9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,1,0,7,4,0,48,57,65,90,
        95,95,97,122,3,0,9,10,13,13,32,32,2,0,42,42,47,47,2,0,37,37,43,43,
        2,0,60,60,62,62,2,0,10,10,13,13,1,0,48,57,102,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,1,25,1,0,0,0,3,27,1,0,0,0,5,30,1,0,0,0,7,35,1,0,0,0,9,41,1,0,
        0,0,11,43,1,0,0,0,13,49,1,0,0,0,15,56,1,0,0,0,17,66,1,0,0,0,19,78,
        1,0,0,0,21,81,1,0,0,0,23,86,1,0,0,0,25,26,5,40,0,0,26,2,1,0,0,0,
        27,28,5,41,0,0,28,4,1,0,0,0,29,31,7,0,0,0,30,29,1,0,0,0,31,32,1,
        0,0,0,32,30,1,0,0,0,32,33,1,0,0,0,33,6,1,0,0,0,34,36,7,1,0,0,35,
        34,1,0,0,0,36,37,1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,39,1,0,0,
        0,39,40,6,3,0,0,40,8,1,0,0,0,41,42,5,33,0,0,42,10,1,0,0,0,43,44,
        5,45,0,0,44,12,1,0,0,0,45,50,7,2,0,0,46,47,5,47,0,0,47,50,5,47,0,
        0,48,50,7,3,0,0,49,45,1,0,0,0,49,46,1,0,0,0,49,48,1,0,0,0,50,14,
        1,0,0,0,51,57,7,4,0,0,52,53,5,62,0,0,53,57,5,61,0,0,54,55,5,60,0,
        0,55,57,5,61,0,0,56,51,1,0,0,0,56,52,1,0,0,0,56,54,1,0,0,0,57,16,
        1,0,0,0,58,59,5,38,0,0,59,67,5,38,0,0,60,61,5,124,0,0,61,67,5,124,
        0,0,62,63,5,61,0,0,63,67,5,61,0,0,64,65,5,33,0,0,65,67,5,61,0,0,
        66,58,1,0,0,0,66,60,1,0,0,0,66,62,1,0,0,0,66,64,1,0,0,0,67,18,1,
        0,0,0,68,69,5,61,0,0,69,70,5,61,0,0,70,79,5,62,0,0,71,72,5,60,0,
        0,72,73,5,61,0,0,73,79,5,61,0,0,74,75,5,60,0,0,75,76,5,61,0,0,76,
        77,5,61,0,0,77,79,5,62,0,0,78,68,1,0,0,0,78,71,1,0,0,0,78,74,1,0,
        0,0,79,20,1,0,0,0,80,82,7,5,0,0,81,80,1,0,0,0,82,83,1,0,0,0,83,81,
        1,0,0,0,83,84,1,0,0,0,84,22,1,0,0,0,85,87,7,6,0,0,86,85,1,0,0,0,
        87,88,1,0,0,0,88,86,1,0,0,0,88,89,1,0,0,0,89,24,1,0,0,0,9,0,32,37,
        49,56,66,78,83,88,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    ID = 3
    WS = 4
    NOT = 5
    MINUS = 6
    NUMERIC_COMPUTATION = 7
    NUMERIC_RELATIONAL = 8
    BINARYOP = 9
    IMPLIESOP = 10
    NEWLINE = 11
    INT = 12

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'!'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "WS", "NOT", "MINUS", "NUMERIC_COMPUTATION", "NUMERIC_RELATIONAL", 
            "BINARYOP", "IMPLIESOP", "NEWLINE", "INT" ]

    ruleNames = [ "T__0", "T__1", "ID", "WS", "NOT", "MINUS", "NUMERIC_COMPUTATION", 
                  "NUMERIC_RELATIONAL", "BINARYOP", "IMPLIESOP", "NEWLINE", 
                  "INT" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


